name: 'DevAgent - AI Issue Fix'
description: 'Automatically generates fixes for issues labeled with ai-fix using Claude'

on:
  workflow_call:
    inputs:
      issue_number:
        description: 'Issue number to fix (required for fix mode)'
        required: false
        type: string
      repository:
        description: 'Repository name (owner/repo)'
        required: true
        type: string
      base_branch:
        description: 'Base branch to create PR against'
        required: false
        type: string
        default: 'main'
      git_user_name:
        description: 'Git commit author name'
        required: false
        type: string
        default: 'DevAgent'
      git_user_email:
        description: 'Git commit author email'
        required: false
        type: string
        default: 'devagent@github-actions.local'
      mode:
        description: 'Mode: "fix" (fix issue) or "cache-update" (update cache)'
        required: false
        type: string
        default: 'fix'
      pr_number:
        description: 'PR number for cache update mode'
        required: false
        type: string
    secrets:
      ANTHROPIC_API_KEY:
        description: 'Anthropic API key for Claude'
        required: true

jobs:
  devagent:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
    container:
      image: ghcr.io/jayarjo/devagent:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure git safe directory
      run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Configure git user
      run: |
        git config --global user.name "${{ inputs.git_user_name }}"
        git config --global user.email "${{ inputs.git_user_email }}"

    - name: Cache DevAgent repository insights
      uses: actions/cache@v3
      with:
        path: /tmp/devagent-cache
        key: devagent-${{ github.repository }}-persistent
        restore-keys: |
          devagent-${{ github.repository }}-persistent

    - name: Get issue details
      id: issue
      if: inputs.mode == 'fix'
      run: |
        # Use template to get clean text output instead of JSON
        TITLE=$(gh api repos/${{ inputs.repository }}/issues/${{ inputs.issue_number }} --template '{{.title}}')
        BODY=$(gh api repos/${{ inputs.repository }}/issues/${{ inputs.issue_number }} --template '{{.body}}')

        echo "title=$TITLE" >> $GITHUB_OUTPUT

        echo "body<<DEVAGENT_EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "DEVAGENT_EOF" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get changed files from PR
      id: changes
      if: inputs.mode == 'cache-update'
      run: |
        # Get list of changed files in the merged PR
        gh api repos/${{ inputs.repository }}/pulls/${{ inputs.pr_number }}/files \
          --jq '.[].filename' > /tmp/changed-files.txt

        echo "Changed files:"
        cat /tmp/changed-files.txt

        echo "Total changed files: $(wc -l < /tmp/changed-files.txt)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run DevAgent - Fix Issue
      if: inputs.mode == 'fix'
      run: |
        node /app/orchestrator.js
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: ${{ inputs.issue_number }}
        ISSUE_TITLE: ${{ steps.issue.outputs.title }}
        ISSUE_BODY: ${{ steps.issue.outputs.body }}
        REPOSITORY: ${{ inputs.repository }}
        BASE_BRANCH: ${{ inputs.base_branch }}
        GIT_USER_NAME: ${{ inputs.git_user_name }}
        GIT_USER_EMAIL: ${{ inputs.git_user_email }}

    - name: Run DevAgent - Update Cache
      if: inputs.mode == 'cache-update'
      run: |
        node /app/orchestrator.js --update-cache-mode
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPOSITORY: ${{ inputs.repository }}
        CHANGED_FILES: /tmp/changed-files.txt

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: devagent-logs-${{ inputs.mode }}-${{ inputs.issue_number || inputs.pr_number || github.run_number }}
        path: /tmp/agent-logs/